{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "env": {
      "Type": "String"
    },
    "apiteamGraphQLAPIIdOutput": {
      "Type": "String",
      "Description": "Input parameter describing GraphQLAPIIdOutput attribute for api/team resource"
    },
    "apiteamGraphQLAPIEndpointOutput": {
      "Type": "String",
      "Description": "Input parameter describing GraphQLAPIEndpointOutput attribute for api/team resource"
    },
    "Source": {
      "Type": "String"
    },
    "Login": {
      "Type": "String"
    },
    "functionteamStatusName": {
      "Type": "String",
      "Description": "Input parameter describing Name attribute for function/teamStatus resource"
    },
    "functionteamStatusArn": {
      "Type": "String",
      "Description": "Input parameter describing Arn attribute for function/teamStatus resource"
    },
    "functionteamStatusRegion": {
      "Type": "String",
      "Description": "Input parameter describing Region attribute for function/teamStatus resource"
    },
    "functionteamStatusLambdaExecutionRole": {
      "Type": "String",
      "Description": "Input parameter describing LambdaExecutionRole attribute for function/teamStatus resource"
    },
    "functionteamNotifyWebhookArn": {
      "Type": "String",
      "Description": "Input parameter describing Arn attribute for function/teamNotifyWebhook resource"
    }
  },
  "Resources": {
    "GrantStateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "StateMachineName": {
          "Fn::Join": [
            "-",
            [
              "TEAM-Grant-SM",
              {
                "Ref": "env"
              }
            ]
          ]
        },
        "DefinitionString": {
          "Fn::Sub": [
            "{\r\n  \"Comment\": \"Temporary Elevated Access Management Grant state machine\",\r\n  \"StartAt\": \"Grant Permission\",\r\n  \"States\": {\r\n    \"Grant Permission\": {\r\n      \"Type\": \"Task\",\r\n      \"Next\": \"Update Request Status - in progress\",\r\n      \"Parameters\": {\r\n        \"InstanceArn.$\": \"$.instanceARN\",\r\n        \"PermissionSetArn.$\": \"$.roleId\",\r\n        \"PrincipalId.$\": \"$.userId\",\r\n        \"PrincipalType\": \"USER\",\r\n        \"TargetId.$\": \"$.accountId\",\r\n        \"TargetType\": \"AWS_ACCOUNT\"\r\n      },\r\n      \"Resource\": \"arn:aws:states:::aws-sdk:ssoadmin:createAccountAssignment\",\r\n      \"ResultPath\": \"$.grant\",\r\n      \"Catch\": [\r\n        {\r\n          \"ErrorEquals\": [\"States.ALL\"],\r\n          \"Next\": \"Update Request Status - in progress\",\r\n          \"ResultPath\": \"$.statusError\"\r\n        }\r\n      ]\r\n    },\r\n    \"Update Request Status - in progress\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::lambda:invoke\",\r\n      \"Parameters\": { \"Payload.$\": \"$\", \"FunctionName\": \"${Function}\" },\r\n      \"Retry\": [\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"Lambda.ServiceException\",\r\n            \"Lambda.AWSLambdaException\",\r\n            \"Lambda.SdkClientException\",\r\n            \"Lambda.TooManyRequestsException\"\r\n          ],\r\n          \"IntervalSeconds\": 2,\r\n          \"MaxAttempts\": 6,\r\n          \"BackoffRate\": 2\r\n        }\r\n      ],\r\n      \"ResultPath\": null,\r\n      \"Next\": \"DynamoDB UpdateStartTime\"\r\n    },\r\n    \"DynamoDB UpdateStartTime\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::dynamodb:updateItem\",\r\n      \"Parameters\": {\r\n        \"TableName\": \"${DB}\",\r\n        \"Key\": { \"id\": { \"S.$\": \"$.id\" } },\r\n        \"UpdateExpression\": \"SET startTime = :time\",\r\n        \"ExpressionAttributeValues\": {\r\n          \":time\": { \"S.$\": \"$$.State.EnteredTime\" }\r\n        }\r\n      },\r\n      \"Next\": \"Grant Error ?\",\r\n      \"ResultPath\": null\r\n    },\r\n    \"Grant Error ?\": {\r\n      \"Type\": \"Choice\",\r\n      \"Choices\": [\r\n        {\r\n          \"Variable\": \"$.statusError\",\r\n          \"IsPresent\": true,\r\n          \"Next\": \"Notify Error - Notification Type\"\r\n        }\r\n      ],\r\n      \"Default\": \"Notify Requester - Started - Notification Type\"\r\n    },\r\n    \"Notify Error - Notification Type\": {\r\n      \"Type\": \"Choice\",\r\n      \"Choices\": [\r\n        {\r\n          \"Variable\": \"$.notification_service\",\r\n          \"StringEquals\": \"SNS\",\r\n          \"Next\": \"Notify Error - SNS\"\r\n        },\r\n        {\r\n          \"Variable\": \"$.notification_service\",\r\n          \"StringEquals\": \"SES\",\r\n          \"Next\": \"Notify Error - SES\"\r\n        }\r\n      ],\r\n      \"Default\": \"Pass\"\r\n    },\r\n    \"Pass\": {\r\n      \"Type\": \"Pass\",\r\n      \"End\": true\r\n    },\r\n    \"Notify Error - SNS\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::sns:publish\",\r\n      \"Parameters\": {\r\n        \"Message.$\": \"$\",\r\n        \"TopicArn.$\": \"$.notification_topic_arn\"\r\n      },\r\n      \"End\": true,\r\n      \"ResultPath\": null\r\n    },\r\n    \"Notify Requester - Started - Notification Type\": {\r\n      \"Type\": \"Choice\",\r\n      \"Choices\": [\r\n        {\r\n          \"Variable\": \"$.notification_service\",\r\n          \"StringEquals\": \"SNS\",\r\n          \"Next\": \"Notify Requester - Started - SNS\"\r\n        },\r\n        {\r\n          \"Variable\": \"$.notification_service\",\r\n          \"StringEquals\": \"SES\",\r\n          \"Next\": \"Notify Requester - Started - SES\"\r\n        }\r\n      ],\r\n      \"Default\": \"Wait\"\r\n    },\r\n    \"Notify Requester - Started - SNS\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::sns:publish\",\r\n      \"Parameters\": {\r\n        \"Message.$\": \"$\",\r\n        \"TopicArn.$\": \"$.notification_topic_arn\"\r\n      },\r\n      \"Next\": \"Wait\",\r\n      \"Catch\": [\r\n        {\r\n          \"ErrorEquals\": [\"States.ALL\"],\r\n          \"Next\": \"Wait\",\r\n          \"ResultPath\": \"$.error\"\r\n        }\r\n      ],\r\n      \"ResultPath\": null\r\n    },\r\n    \"Notify Error - SES\": {\r\n      \"Type\": \"Task\",\r\n      \"Parameters\": {\r\n        \"Destination\": {\r\n          \"ToAddresses.$\": \"States.Array($.source_email)\",\r\n          \"CcAddresses.$\": \"States.Array($.email)\"\r\n        },\r\n        \"Message\": {\r\n          \"Body\": {\r\n            \"Html\": {\r\n              \"Charset\": \"UTF-8\",\r\n              \"Data.$\": \"States.Format('<html><body>This is an error notification for TEAM elevated access request to account <b>{}({})<\/b> for <b>{}<\/b><p> The permission set <b>{}<\/b> has not been successfully attached to the requester entity. <\/p><p><p>Use the request info below to review step function workflow logs to troubleshoot the error.<\/p><b><u>Request info<\/u><\/b><p>Step function workflow name: <b>{}<\/b><p>Step function execution name: <b>{}<\/b><\/p><p>Step function execution Id: <b>{}<\/b><\/body><\/html>',$.accountName,$.accountId,$.email,$.role,$$.StateMachine.Name,$$.Execution.Name,$$.Execution.Id)\"\r\n            }\r\n          },\r\n          \"Subject\": {\r\n            \"Data.$\": \"States.Format('Error Notification - TEAM elevated access request for {} to AWS account {}({})',$.email,$.accountName,$.accountId)\"\r\n          }\r\n        },\r\n        \"Source\": \"States.Array($.source_email)\"\r\n      },\r\n      \"Resource\": \"arn:aws:states:::aws-sdk:ses:sendEmail\",\r\n      \"End\": true,\r\n      \"ResultPath\": null\r\n    },\r\n    \"Notify Requester - Started - SES\": {\r\n      \"Type\": \"Task\",\r\n      \"Parameters\": {\r\n        \"Destination\": {\r\n          \"ToAddresses.$\": \"States.Array($.email)\",\r\n          \"CcAddresses.$\": \"$.approvers\"\r\n        },\r\n        \"Message\": {\r\n          \"Body\": {\r\n            \"Html\": {\r\n              \"Charset\": \"UTF-8\",\r\n              \"Data.$\": \"States.Format('<html><body>TEAM elevated access for {} to account {}({}) is <b>in progress<\/b> and would expire in <b>{} hours<\/b><p>You will get a notification when elevated access expires<\/p><\/body><\/html>',$.email,$.accountName,$.accountId,$.time)\"\r\n            }\r\n          },\r\n          \"Subject\": {\r\n            \"Data.$\": \"States.Format('TEAM elevated access request for {} to Account {}({}) has started',$.email,$.accountName,$.accountId)\"\r\n          }\r\n        },\r\n        \"Source\": \"States.Array($.source_email)\"\r\n      },\r\n      \"Resource\": \"arn:aws:states:::aws-sdk:ses:sendEmail\",\r\n      \"ResultPath\": null,\r\n      \"Next\": \"Wait\",\r\n      \"Catch\": [\r\n        {\r\n          \"ErrorEquals\": [\"States.ALL\"],\r\n          \"Next\": \"Wait\",\r\n          \"ResultPath\": \"$.error\"\r\n        }\r\n      ]\r\n    },\r\n    \"Wait\": {\r\n      \"Type\": \"Wait\",\r\n      \"Next\": \"Revoke Permission\",\r\n      \"SecondsPath\": \"$.duration\"\r\n    },\r\n    \"Revoke Permission\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::states:startExecution\",\r\n      \"Parameters\": { \"StateMachineArn\": \"${RevokeSM}\", \"Input.$\": \"$\" },\r\n      \"End\": true\r\n    }\r\n  }\r\n}",
            {
              "RevokeSM": {
                "Ref": "RevokeStateMachine"
              },
              "Function": {
                "Ref": "functionteamStatusArn"
              },
              "DB": {
                "Fn::ImportValue": {
                  "Fn::Sub": "${apiteamGraphQLAPIIdOutput}:GetAtt:requestsTable:Name"
                }
              }
            }
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": ["TEAMGrantSMRole", "Arn"]
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": ["TEAMStateMachineLogGroup", "Arn"]
                }
              }
            }
          ],
          "IncludeExecutionData": true,
          "Level": "ALL"
        },
        "TracingConfiguration": {
          "Enabled": true
        }
      }
    },
    "ScheduleStateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "StateMachineName": {
          "Fn::Join": [
            "-",
            [
              "TEAM-Schedule-SM",
              {
                "Ref": "env"
              }
            ]
          ]
        },
        "DefinitionString": {
          "Fn::Sub": [
            "{\r\n  \"Comment\": \"Temporary Elevated Access Management Schedule state machine\",\r\n  \"StartAt\": \"Update Request Status - scheduled\",\r\n  \"States\": {\r\n    \"Update Request Status - scheduled\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::lambda:invoke\",\r\n      \"Parameters\": { \"Payload.$\": \"$\", \"FunctionName\": \"${Function}\" },\r\n      \"Retry\": [\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"Lambda.ServiceException\",\r\n            \"Lambda.AWSLambdaException\",\r\n            \"Lambda.SdkClientException\",\r\n            \"Lambda.TooManyRequestsException\"\r\n          ],\r\n          \"IntervalSeconds\": 2,\r\n          \"MaxAttempts\": 6,\r\n          \"BackoffRate\": 2\r\n        }\r\n      ],\r\n      \"Next\": \"Notify Requester - Choice\",\r\n      \"ResultPath\": null\r\n    },\r\n    \"Notify Requester - Choice\": {\r\n      \"Type\": \"Choice\",\r\n      \"Choices\": [\r\n        {\r\n          \"Variable\": \"$.notification_service\",\r\n          \"StringEquals\": \"SNS\",\r\n          \"Next\": \"Notify Requester - SNS\"\r\n        },\r\n        {\r\n          \"Variable\": \"$.notification_service\",\r\n          \"StringEquals\": \"SES\",\r\n          \"Next\": \"Notify Requester - SES\"\r\n        }\r\n      ],\r\n      \"Default\": \"schedule\"\r\n    },\r\n    \"Notify Requester - SNS\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::sns:publish\",\r\n      \"Parameters\": {\r\n        \"Message.$\": \"$\",\r\n        \"TopicArn.$\": \"$.notification_topic_arn\"\r\n      },\r\n      \"Next\": \"schedule\",\r\n      \"Catch\": [\r\n        {\r\n          \"ErrorEquals\": [\"States.ALL\"],\r\n          \"Next\": \"schedule\",\r\n          \"ResultPath\": \"$.error\"\r\n        }\r\n      ],\r\n      \"ResultPath\": null\r\n    },\r\n    \"Notify Requester - SES\": {\r\n      \"Type\": \"Task\",\r\n      \"Parameters\": {\r\n        \"Destination\": {\r\n          \"ToAddresses.$\": \"States.Array($.email)\"\r\n        },\r\n        \"Message\": {\r\n          \"Body\": {\r\n            \"Html\": {\r\n              \"Charset\": \"UTF-8\",\r\n              \"Data.$\": \"States.Format('<html><body><h4>TEAM elevated access request for {} to AWS account {}({}) has been <b>approved<\/b> for {} hour <\/h4><p> You will get a notification when elevated access has started <\/p><\/body><\/html>',$.email,$.accountName,$.accountId,$.time)\"\r\n            }\r\n          },\r\n          \"Subject\": {\r\n            \"Data.$\": \"States.Format('TEAM elevated access request for {} to AWS account - {}({}) approved', $.email, $.accountName,$.accountId)\"\r\n          }\r\n        },\r\n        \"Source.$\": \"States.Array($.source_email)\"\r\n      },\r\n      \"Resource\": \"arn:aws:states:::aws-sdk:ses:sendEmail\",\r\n      \"ResultPath\": null,\r\n      \"Next\": \"schedule\",\r\n      \"Catch\": [\r\n        {\r\n          \"ErrorEquals\": [\"States.ALL\"],\r\n          \"Next\": \"schedule\",\r\n          \"ResultPath\": \"$.error\"\r\n        }\r\n      ]\r\n    },\r\n    \"schedule\": {\r\n      \"Type\": \"Wait\",\r\n      \"Next\": \"DynamoDB GetStatus\",\r\n      \"TimestampPath\": \"$.startTime\"\r\n    },\r\n    \"DynamoDB GetStatus\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::dynamodb:getItem\",\r\n      \"Parameters\": {\r\n        \"TableName\": \"${DB}\",\r\n        \"Key\": { \"id\": { \"S.$\": \"$.id\" } }\r\n      },\r\n      \"Next\": \"Scheduled ?\",\r\n      \"ResultPath\": \"$.result\"\r\n    },\r\n    \"Scheduled ?\": {\r\n      \"Type\": \"Choice\",\r\n      \"Choices\": [\r\n        {\r\n          \"Variable\": \"$.result.Item.status.S\",\r\n          \"StringEquals\": \"scheduled\",\r\n          \"Next\": \"Grant Permission\"\r\n        }\r\n      ],\r\n      \"Default\": \"Pass\"\r\n    },\r\n    \"Pass\": {\r\n      \"Type\": \"Pass\",\r\n      \"End\": true\r\n    },\r\n    \"Grant Permission\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::states:startExecution\",\r\n      \"Parameters\": { \"StateMachineArn\": \"${GrantSM}\", \"Input.$\": \"$\" },\r\n      \"End\": true\r\n    }\r\n  }\r\n}",
            {
              "DB": {
                "Fn::ImportValue": {
                  "Fn::Sub": "${apiteamGraphQLAPIIdOutput}:GetAtt:requestsTable:Name"
                }
              },
              "GrantSM": {
                "Ref": "GrantStateMachine"
              },
              "Function": {
                "Ref": "functionteamStatusArn"
              }
            }
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": ["TEAMScheduleSMRole", "Arn"]
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": ["TEAMStateMachineLogGroup", "Arn"]
                }
              }
            }
          ],
          "IncludeExecutionData": true,
          "Level": "ALL"
        },
        "TracingConfiguration": {
          "Enabled": true
        }
      }
    },
    "RejectStateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "StateMachineName": {
          "Fn::Join": [
            "-",
            [
              "TEAM-Reject-SM",
              {
                "Ref": "env"
              }
            ]
          ]
        },
        "DefinitionString": {
          "Fn::Sub": [
            "{\r\n  \"Comment\": \"Temporary Elevated Access Management Reject state machine\",\r\n  \"StartAt\": \"Status ?\",\r\n  \"States\": {\r\n    \"Status ?\": {\r\n      \"Type\": \"Choice\",\r\n      \"Choices\": [\r\n        {\r\n          \"Variable\": \"$.status\",\r\n          \"StringEquals\": \"cancelled\",\r\n          \"Next\": \"Notify Requester Cancelled - Choice\"\r\n        },\r\n        {\r\n          \"Variable\": \"$.status\",\r\n          \"StringEquals\": \"rejected\",\r\n          \"Next\": \"Notify Requester Rejected - Choice\"\r\n        }\r\n      ]\r\n    },\r\n    \"Notify Requester Rejected - Choice\": {\r\n      \"Type\": \"Choice\",\r\n      \"Choices\": [\r\n        {\r\n          \"Variable\": \"$.notification_service\",\r\n          \"StringEquals\": \"SNS\",\r\n          \"Next\": \"Notify Requester Rejected - SNS\"\r\n        },\r\n        {\r\n          \"Variable\": \"$.notification_service\",\r\n          \"StringEquals\": \"SES\",\r\n          \"Next\": \"Notify Requester Rejected - SES\"\r\n        }\r\n      ],\r\n      \"Default\": \"Success\"\r\n    },\r\n    \"Notify Requester Rejected - SNS\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::sns:publish\",\r\n      \"Parameters\": {\r\n        \"Message.$\": \"$\",\r\n        \"TopicArn.$\": \"$.notification_topic_arn\"\r\n      },\r\n      \"Next\": \"Success\",\r\n      \"Catch\": [\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"States.ALL\"\r\n          ],\r\n          \"ResultPath\": \"$.error\",\r\n          \"Next\": \"Success\"\r\n        }\r\n      ],\r\n      \"ResultPath\": null\r\n    },\r\n    \"Notify Requester Cancelled - Choice\": {\r\n      \"Type\": \"Choice\",\r\n      \"Choices\": [\r\n        {\r\n          \"Variable\": \"$.notification_service\",\r\n          \"StringEquals\": \"SNS\",\r\n          \"Next\": \"Notify Requester Cancelled - SNS\"\r\n        },\r\n        {\r\n          \"Variable\": \"$.notification_service\",\r\n          \"StringEquals\": \"SES\",\r\n          \"Next\": \"Notify Requester Cancelled - SES\"\r\n        }\r\n      ],\r\n      \"Default\": \"Success\"\r\n    },\r\n    \"Notify Requester Cancelled - SNS\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::sns:publish\",\r\n      \"Parameters\": {\r\n        \"Message.$\": \"$\",\r\n        \"TopicArn.$\": \"$.notification_topic_arn\"\r\n      },\r\n      \"Next\": \"Success\",\r\n      \"Catch\": [\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"States.ALL\"\r\n          ],\r\n          \"ResultPath\": \"$.error\",\r\n          \"Next\": \"Success\"\r\n        }\r\n      ],\r\n      \"ResultPath\": null\r\n    },\r\n    \"Notify Requester Cancelled - SES\": {\r\n      \"Type\": \"Task\",\r\n      \"Parameters\": {\r\n        \"Destination\": {\r\n          \"ToAddresses.$\": \"$.approvers\",\r\n          \"CcAddresses.$\": \"States.Array($.email)\"\r\n        },\r\n        \"Message\": {\r\n          \"Body\": {\r\n            \"Html\": {\r\n              \"Charset\": \"UTF-8\",\r\n              \"Data.$\": \"States.Format('<html><body>TEAM elevated access approval request for <b>{}<\/b> to account <b>{}({})<\/b> has been <b>cancelled<\/b> by the requester <\/body><\/html>',$.email,$.accountName,$.accountId)\"\r\n            }\r\n          },\r\n          \"Subject\": {\r\n            \"Data.$\": \"States.Format('TEAM elevated access request for {} to account {}({}) cancelled', $.email,$.accountName,$.accountId)\"\r\n          }\r\n        },\r\n        \"Source.$\": \"States.Array($.source_email)\"\r\n      },\r\n      \"Resource\": \"arn:aws:states:::aws-sdk:ses:sendEmail\",\r\n      \"ResultPath\": null,\r\n      \"Catch\": [\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"States.ALL\"\r\n          ],\r\n          \"Next\": \"Success\",\r\n          \"ResultPath\": \"$.error\"\r\n        }\r\n      ],\r\n      \"Next\": \"Success\"\r\n    },\r\n    \"Notify Requester Rejected - SES\": {\r\n      \"Type\": \"Task\",\r\n      \"Parameters\": {\r\n        \"Destination\": {\r\n          \"ToAddresses.$\": \"States.Array($.email)\"\r\n        },\r\n        \"Message\": {\r\n          \"Body\": {\r\n            \"Html\": {\r\n              \"Charset\": \"UTF-8\",\r\n              \"Data.$\": \"States.Format('<html><body>TEAM elevated access request for <b>{}<\/b> to account <b>{}({})<\/b> has been <b>rejected<\/b><p> Check your TEAM request details for more information <\/p><\/body><\/html>',$.email,$.accountName,$.accountId)\"\r\n            }\r\n          },\r\n          \"Subject\": {\r\n            \"Data.$\": \"States.Format('TEAM elevated access request for {} to AWS account {}({}) rejected', $.email,$.accountName,$.accountId)\"\r\n          }\r\n        },\r\n        \"Source.$\": \"States.Array($.source_email)\"\r\n      },\r\n      \"Resource\": \"arn:aws:states:::aws-sdk:ses:sendEmail\",\r\n      \"ResultPath\": null,\r\n      \"Catch\": [\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"States.ALL\"\r\n          ],\r\n          \"Next\": \"Success\",\r\n          \"ResultPath\": \"$.error\"\r\n        }\r\n      ],\r\n      \"Next\": \"Success\"\r\n    },\r\n    \"Success\": {\r\n      \"Type\": \"Succeed\"\r\n    }\r\n  }\r\n}",
            {
              "Source": {
                "Ref": "Source"
              }
            }
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": ["TEAMRejectSMRole", "Arn"]
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": ["TEAMStateMachineLogGroup", "Arn"]
                }
              }
            }
          ],
          "IncludeExecutionData": true,
          "Level": "ALL"
        },
        "TracingConfiguration": {
          "Enabled": true
        }
      }
    },
    "RevokeStateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "StateMachineName": {
          "Fn::Join": [
            "-",
            [
              "TEAM-Revoke-SM",
              {
                "Ref": "env"
              }
            ]
          ]
        },
        "DefinitionString": {
          "Fn::Sub": [
            "{\r\n  \"Comment\": \"Temporary Elevated Access Management Revoke state machine\",\r\n  \"StartAt\": \"DynamoDB GetStatus\",\r\n  \"States\": {\r\n    \"DynamoDB GetStatus\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::dynamodb:getItem\",\r\n      \"Parameters\": {\r\n        \"TableName\": \"${DB}\",\r\n        \"Key\": { \"id\": { \"S.$\": \"$.id\" } }\r\n      },\r\n      \"Next\": \"Revoked ?\",\r\n      \"ResultPath\": \"$.data\"\r\n    },\r\n    \"Revoked ?\": {\r\n      \"Type\": \"Choice\",\r\n      \"Choices\": [\r\n        {\r\n          \"And\": [\r\n            {\r\n              \"Variable\": \"$.data.Item.status.S \",\r\n              \"StringEquals\": \"revoked\"\r\n            },\r\n            {\r\n              \"Variable\": \"$.result\",\r\n              \"IsPresent\": true\r\n            }\r\n          ],\r\n          \"Next\": \"Pass\"\r\n        }\r\n      ],\r\n      \"Default\": \"Revoke Permission\"\r\n    },\r\n    \"Revoke Permission\": {\r\n      \"Type\": \"Task\",\r\n      \"Parameters\": {\r\n        \"InstanceArn.$\": \"$.instanceARN\",\r\n        \"PermissionSetArn.$\": \"$.roleId\",\r\n        \"PrincipalId.$\": \"$.userId\",\r\n        \"PrincipalType\": \"USER\",\r\n        \"TargetId.$\": \"$.accountId\",\r\n        \"TargetType\": \"AWS_ACCOUNT\"\r\n      },\r\n      \"Resource\": \"arn:aws:states:::aws-sdk:ssoadmin:deleteAccountAssignment\",\r\n      \"ResultPath\": \"$.revoke\",\r\n      \"Next\": \"Notify Requester Session Ended - Choice\",\r\n      \"Catch\": [\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"States.ALL\"\r\n          ],\r\n          \"ResultPath\": \"$.statusError\",\r\n          \"Next\": \"Update Request Status\"\r\n        }\r\n      ]\r\n    },\r\n    \"Notify Requester Session Ended - Choice\": {\r\n      \"Type\": \"Choice\",\r\n      \"Choices\": [\r\n        {\r\n          \"Variable\": \"$.notification_service\",\r\n          \"StringEquals\": \"SNS\",\r\n          \"Next\": \"Notify Requester Session Ended - SNS\"\r\n        },\r\n        {\r\n          \"Variable\": \"$.notification_service\",\r\n          \"StringEquals\": \"SES\",\r\n          \"Next\": \"Notify Requester Session Ended - SES\"\r\n        }\r\n      ],\r\n      \"Default\": \"Revoked || Ended ?\"\r\n    },\r\n    \"Notify Requester Session Ended - SNS\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::sns:publish\",\r\n      \"Parameters\": {\r\n        \"Message.$\": \"$\",\r\n        \"TopicArn.$\": \"$.notification_topic_arn\"\r\n      },\r\n      \"Next\": \"Revoked || Ended ?\",\r\n      \"Catch\": [\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"States.ALL\"\r\n          ],\r\n          \"Next\": \"Revoked || Ended ?\",\r\n          \"ResultPath\": \"$.error\"\r\n        }\r\n      ],\r\n      \"ResultPath\": null\r\n    },\r\n    \"Pass\": {\r\n      \"Type\": \"Pass\",\r\n      \"End\": true\r\n    },\r\n    \"Notify Requester Session Ended - SES\": {\r\n      \"Type\": \"Task\",\r\n      \"Parameters\": {\r\n        \"Destination\": {\r\n          \"ToAddresses.$\": \"States.Array($.email)\",\r\n          \"CcAddresses.$\": \"$.approvers\"\r\n        },\r\n        \"Message\": {\r\n          \"Body\": {\r\n            \"Html\": {\r\n              \"Charset\": \"UTF-8\",\r\n              \"Data.$\": \"States.Format('<html><body>TEAM elevated access for <b>{}<\/b> to AWS account - <b>{}({})<\/b> has <b>ended<\/b><p> Elevated access has been removed <\/p><p>Login to <a href=https:\/\/scaleseclab.awsapps.com\/start>TEAM Application<\/a> to view session activity logs<\/p><\/body><\/html>',$.email,$.accountName,$.accountId)\"\r\n            }\r\n          },\r\n          \"Subject\": {\r\n            \"Data.$\": \"States.Format('TEAM elevated access request for {} to AWS account - {}({}) has ended',$.email,$.accountName,$.accountId)\"\r\n          }\r\n        },\r\n        \"Source.$\": \"States.Array($.source_email)\"\r\n      },\r\n      \"Resource\": \"arn:aws:states:::aws-sdk:ses:sendEmail\",\r\n      \"Next\": \"Revoked || Ended ?\",\r\n      \"ResultPath\": null,\r\n      \"Catch\": [\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"States.ALL\"\r\n          ],\r\n          \"Next\": \"Revoked || Ended ?\",\r\n          \"ResultPath\": \"$.error\"\r\n        }\r\n      ]\r\n    },\r\n    \"Revoked || Ended ?\": {\r\n      \"Type\": \"Choice\",\r\n      \"Choices\": [\r\n        {\r\n          \"Variable\": \"$.data.Item.status.S\",\r\n          \"StringEquals\": \"revoked\",\r\n          \"Next\": \"DynamoDB Update EndTime\"\r\n        }\r\n      ],\r\n      \"Default\": \"Update Request Status\"\r\n    },\r\n    \"Update Request Status\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::lambda:invoke\",\r\n      \"Parameters\": { \"Payload.$\": \"$\", \"FunctionName\": \"${Function}\" },\r\n      \"Retry\": [\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"Lambda.ServiceException\",\r\n            \"Lambda.AWSLambdaException\",\r\n            \"Lambda.SdkClientException\",\r\n            \"Lambda.TooManyRequestsException\"\r\n          ],\r\n          \"IntervalSeconds\": 2,\r\n          \"MaxAttempts\": 6,\r\n          \"BackoffRate\": 2\r\n        }\r\n      ],\r\n      \"Next\": \"Revoke Error ?\",\r\n      \"ResultPath\": null\r\n    },\r\n    \"Revoke Error ?\": {\r\n      \"Type\": \"Choice\",\r\n      \"Choices\": [\r\n        {\r\n          \"Variable\": \"$.statusError\",\r\n          \"IsPresent\": true,\r\n          \"Next\": \"Notify Error - Choice\"\r\n        }\r\n      ],\r\n      \"Default\": \"DynamoDB Update EndTime\"\r\n    },\r\n    \"Notify Error - Choice\": {\r\n      \"Type\": \"Choice\",\r\n      \"Choices\": [\r\n        {\r\n          \"Variable\": \"$.notification_service\",\r\n          \"StringEquals\": \"SNS\",\r\n          \"Next\": \"Notify Error - SNS\"\r\n        },\r\n        {\r\n          \"Variable\": \"$.notification_service\",\r\n          \"StringEquals\": \"SES\",\r\n          \"Next\": \"Notify Error - SES\"\r\n        }\r\n      ],\r\n      \"Default\": \"Pass\"\r\n    },\r\n    \"Notify Error - SNS\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::sns:publish\",\r\n      \"Parameters\": {\r\n        \"Message.$\": \"$\",\r\n        \"TopicArn.$\": \"$.notification_topic_arn\"\r\n      },\r\n      \"End\": true,\r\n      \"ResultPath\": null\r\n    },\r\n    \"DynamoDB Update EndTime\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::dynamodb:updateItem\",\r\n      \"Parameters\": {\r\n        \"TableName\": \"${DB}\",\r\n        \"Key\": { \"id\": { \"S.$\": \"$.id\" } },\r\n        \"UpdateExpression\": \"SET endTime = :time\",\r\n        \"ExpressionAttributeValues\": {\r\n          \":time\": {\r\n            \"S.$\": \"$$.State.EnteredTime\"\r\n          }\r\n        }\r\n      },\r\n      \"End\": true\r\n    },\r\n    \"Notify Error - SES\": {\r\n      \"Type\": \"Task\",\r\n      \"Parameters\": {\r\n        \"Destination\": {\r\n          \"ToAddresses.$\": \"States.Array($.source_email)\",\r\n          \"CcAddresses.$\": \"$.approvers\"\r\n        },\r\n        \"Message\": {\r\n          \"Body\": {\r\n            \"Html\": {\r\n              \"Charset\": \"UTF-8\",\r\n              \"Data.$\": \"States.Format('<html><body>This is an Error notification for TEAM elevated access request to AWS account - {}({}) for {}<p> The permission set <b>{}<\/b>has not been successfully removed from the requester entity. <\/p><p>Use the request info below to review step function workflow logs to troubleshoot the error.<\/p><b><u>Request info<\/u><\/b><p>Step function workflow name: <b>{}<\/b><p>Step function execution name: <b>{}<\/b><\/p><p>Step function execution Id: <b>{}<\/b><\/body><\/html>',$.accountName,$.accountId,$.email,$.role,$$.StateMachine.Name,$$.Execution.Name,$$.Execution.Id)\"\r\n            }\r\n          },\r\n          \"Subject\": {\r\n            \"Data.$\": \"States.Format('Error Notification - TEAM Request for {} to AWS account - {}({})',$.email,$.accountName,$.accountId)\"\r\n          }\r\n        },\r\n        \"Source.$\": \"States.Array($.source_email)\"\r\n      },\r\n      \"Resource\": \"arn:aws:states:::aws-sdk:ses:sendEmail\",\r\n      \"ResultPath\": null,\r\n      \"End\": true\r\n    }\r\n  }\r\n}",
            {
              "DB": {
                "Fn::ImportValue": {
                  "Fn::Sub": "${apiteamGraphQLAPIIdOutput}:GetAtt:requestsTable:Name"
                }
              },
              "Login": {
                "Ref": "Login"
              },
              "Function": {
                "Ref": "functionteamStatusArn"
              }
            }
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": ["TEAMRevokeSMRole", "Arn"]
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": ["TEAMStateMachineLogGroup", "Arn"]
                }
              }
            }
          ],
          "IncludeExecutionData": true,
          "Level": "ALL"
        },
        "TracingConfiguration": {
          "Enabled": true
        }
      }
    },
    "ApprovalStateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "StateMachineName": {
          "Fn::Join": [
            "-",
            [
              "TEAM-Approval-SM",
              {
                "Ref": "env"
              }
            ]
          ]
        },
        "DefinitionString": {
          "Fn::Sub": [
            "{\r\n  \"Comment\": \"Temporary Elevated Access Management Approval state machine\",\r\n  \"StartAt\": \"Notify Approvers - Choice\",\r\n  \"States\": {\r\n    \"Notify Approvers - Choice\": {\r\n      \"Type\": \"Choice\",\r\n      \"Choices\": [\r\n        {\r\n          \"Variable\": \"$.notification_service\",\r\n          \"StringEquals\": \"SNS\",\r\n          \"Next\": \"Notify Approvers - SNS\"\r\n        },\r\n        {\r\n          \"Variable\": \"$.notification_service\",\r\n          \"StringEquals\": \"SES\",\r\n          \"Next\": \"Notify Approvers - SES\"\r\n        }\r\n      ],\r\n      \"Default\": \"Wait\"\r\n    },\r\n    \"Notify Approvers - SNS\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::sns:publish\",\r\n      \"Parameters\": {\r\n        \"Message.$\": \"$\",\r\n        \"TopicArn.$\": \"$.notification_topic_arn\"\r\n      },\r\n      \"Next\": \"Wait\",\r\n      \"ResultPath\": null,\r\n      \"Catch\": [\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"States.ALL\"\r\n          ],\r\n          \"Next\": \"Wait\",\r\n          \"ResultPath\": \"$.error\"\r\n        }\r\n      ]\r\n    },\r\n    \"Notify Approvers - SES\": {\r\n      \"Type\": \"Task\",\r\n      \"Parameters\": {\r\n        \"Destination\": {\r\n          \"ToAddresses.$\": \"$.approvers\",\r\n          \"CcAddresses.$\": \"States.Array($.email)\"\r\n        },\r\n        \"Message\": {\r\n          \"Body\": {\r\n            \"Html\": {\r\n              \"Charset\": \"UTF-8\",\r\n              \"Data.$\": \"States.Format('<html><body><p>This is a TEAM approval request for <b>{}<\/b> to AWS account <b>{}({})<\/b><\/p><p><u><b>Session Length:<\/u><\/b> {}Hrs <\/p><p><u><b>Business Justification:<\/u><\/b> {} <\/p><p>Login to <a href=https:\/\/scaleseclab.awsapps.com\/start>TEAM Application<\/a> to <b>approve or reject<\/b> request<\/p> <\/body><\/html>',$.email,$.accountName,$.accountId,$.time,$.justification)\"\r\n            }\r\n          },\r\n          \"Subject\": {\r\n            \"Data.$\": \"States.Format('TEAM elevated access approval request for {} to AWS account - {}({})', $.email,$.accountName,$.accountId)\"\r\n          }\r\n        },\r\n        \"Source.$\": \"States.Array($.source_email)\"\r\n      },\r\n      \"Resource\": \"arn:aws:states:::aws-sdk:ses:sendEmail\",\r\n      \"ResultPath\": null,\r\n      \"Next\": \"Wait\",\r\n      \"Catch\": [\r\n        {\r\n          \"ErrorEquals\": [\"States.ALL\"],\r\n          \"Next\": \"Wait\",\r\n          \"ResultPath\": \"$.error\"\r\n        }\r\n      ]\r\n    },\r\n    \"Wait\": {\r\n      \"Type\": \"Wait\",\r\n      \"Next\": \"DynamoDB GetStatus\",\r\n      \"SecondsPath\": \"$.expire\"\r\n    },\r\n    \"DynamoDB GetStatus\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::dynamodb:getItem\",\r\n      \"Parameters\": {\r\n        \"TableName\": \"${DB}\",\r\n        \"Key\": { \"id\": { \"S.$\": \"$.id\" } }\r\n      },\r\n      \"Next\": \"Pending ?\",\r\n      \"ResultPath\": \"$.result\"\r\n    },\r\n    \"Pending ?\": {\r\n      \"Type\": \"Choice\",\r\n      \"Choices\": [\r\n        {\r\n          \"Variable\": \"$.result.Item.status.S\",\r\n          \"StringEquals\": \"pending\",\r\n          \"Next\": \"Update Request Status\"\r\n        }\r\n      ],\r\n      \"Default\": \"Pass\"\r\n    },\r\n    \"Update Request Status\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::lambda:invoke\",\r\n      \"Parameters\": { \"Payload.$\": \"$\", \"FunctionName\": \"${Function}\" },\r\n      \"Retry\": [\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"Lambda.ServiceException\",\r\n            \"Lambda.AWSLambdaException\",\r\n            \"Lambda.SdkClientException\",\r\n            \"Lambda.TooManyRequestsException\"\r\n          ],\r\n          \"IntervalSeconds\": 2,\r\n          \"MaxAttempts\": 6,\r\n          \"BackoffRate\": 2\r\n        }\r\n      ],\r\n      \"Next\": \"Notify Requester - Choice\",\r\n      \"ResultPath\": \"$.Payload\"\r\n    },\r\n    \"Notify Requester - Choice\": {\r\n      \"Type\": \"Choice\",\r\n      \"Choices\": [\r\n        {\r\n          \"Variable\": \"$.notification_service\",\r\n          \"StringEquals\": \"SNS\",\r\n          \"Next\": \"Notify Requester Expired - SNS\"\r\n        },\r\n        {\r\n          \"Variable\": \"$.notification_service\",\r\n          \"StringEquals\": \"SES\",\r\n          \"Next\": \"Notify Requester Expired - SES\"\r\n        }\r\n      ],\r\n      \"Default\": \"Pass\"\r\n    },\r\n    \"Notify Requester Expired - SNS\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::sns:publish\",\r\n      \"Parameters\": {\r\n        \"Message.$\": \"$\",\r\n        \"TopicArn.$\": \"$.notification_topic_arn\"\r\n      },\r\n      \"End\": true,\r\n      \"Catch\": [\r\n        {\r\n          \"ErrorEquals\": [\"States.ALL\"],\r\n          \"Next\": \"Pass\"\r\n        }\r\n      ],\r\n      \"ResultPath\": null\r\n    },\r\n    \"Pass\": {\r\n      \"Type\": \"Pass\",\r\n      \"End\": true\r\n    },\r\n    \"Notify Requester Expired - SES\": {\r\n      \"Type\": \"Task\",\r\n      \"Parameters\": {\r\n        \"Destination\": {\r\n          \"ToAddresses.$\": \"States.Array($.email)\",\r\n          \"CcAddresses.$\": \"$.approvers\"\r\n        },\r\n        \"Message\": {\r\n          \"Body\": {\r\n            \"Html\": {\r\n              \"Charset\": \"UTF-8\",\r\n              \"Data.$\": \"States.Format('<html><body><h4>TEAM elevated access request to AWS account - {} has Expired<\/h4><p> Contact your TEAM Administrator or Create New Request<\/p><\/body><\/html>',$.accountName)\"\r\n            }\r\n          },\r\n          \"Subject\": {\r\n            \"Data.$\": \"States.Format('TEAM elevated access request for {} to AWS account - {}({}) expired',$.email,$.accountName,$.accountId)\"\r\n          }\r\n        },\r\n        \"Source.$\": \"States.Array($.source_email)\"\r\n      },\r\n      \"Resource\": \"arn:aws:states:::aws-sdk:ses:sendEmail\",\r\n      \"ResultPath\": null,\r\n      \"End\": true,\r\n      \"Catch\": [\r\n        {\r\n          \"ErrorEquals\": [\"States.ALL\"],\r\n          \"Next\": \"Pass\",\r\n          \"ResultPath\": \"$.error\"\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}",
            {
              "Login": {
                "Ref": "Login"
              },
              "Function": {
                "Ref": "functionteamStatusArn"
              },
              "DB": {
                "Fn::ImportValue": {
                  "Fn::Sub": "${apiteamGraphQLAPIIdOutput}:GetAtt:requestsTable:Name"
                }
              }
            }
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": ["TEAMApproveSMRole", "Arn"]
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": ["TEAMStateMachineLogGroup", "Arn"]
                }
              }
            }
          ],
          "IncludeExecutionData": true,
          "Level": "ALL"
        },
        "TracingConfiguration": {
          "Enabled": true
        }
      }
    },
    "TEAMApproveSMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["states.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "TEAMStepFunctionRolePolicy1",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogDelivery",
                    "logs:GetLogDelivery",
                    "logs:UpdateLogDelivery",
                    "logs:DeleteLogDelivery",
                    "logs:ListLogDeliveries",
                    "logs:PutResourcePolicy",
                    "logs:DescribeResourcePolicies",
                    "logs:DescribeLogGroups"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "ses:SendEmail",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "sns:Publish",
                  "Resource": {
                    "Fn::ImportValue": "NotificationTopicArn"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": {
                    "Ref": "functionteamNotifyWebhookArn"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": ["dynamodb:UpdateItem", "dynamodb:GetItem"],
                  "Resource": {
                    "Fn::Sub": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/requests*"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": {
                    "Ref": "functionteamStatusArn"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "TEAMScheduleSMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["states.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "TEAMStepFunctionRolePolicy1",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogDelivery",
                    "logs:GetLogDelivery",
                    "logs:UpdateLogDelivery",
                    "logs:DeleteLogDelivery",
                    "logs:ListLogDeliveries",
                    "logs:PutResourcePolicy",
                    "logs:DescribeResourcePolicies",
                    "logs:DescribeLogGroups"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "events:PutTargets",
                    "events:PutRule",
                    "events:DescribeRule"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": "ses:SendEmail",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "sns:Publish",
                  "Resource": {
                    "Fn::ImportValue": "NotificationTopicArn"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": ["dynamodb:UpdateItem", "dynamodb:GetItem"],
                  "Resource": {
                    "Fn::Sub": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/requests*"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": "states:StartExecution",
                  "Resource": {
                    "Ref": "GrantStateMachine"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": {
                    "Ref": "functionteamStatusArn"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "TEAMGrantSMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["states.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "TEAMStepFunctionRolePolicy1",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogDelivery",
                    "logs:GetLogDelivery",
                    "logs:UpdateLogDelivery",
                    "logs:DeleteLogDelivery",
                    "logs:ListLogDeliveries",
                    "logs:PutResourcePolicy",
                    "logs:DescribeResourcePolicies",
                    "logs:DescribeLogGroups"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "events:PutTargets",
                    "events:PutRule",
                    "events:DescribeRule"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": "ses:SendEmail",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "sns:Publish",
                  "Resource": {
                    "Fn::ImportValue": "NotificationTopicArn"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": ["sso:CreateAccountAssignment"],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": ["dynamodb:UpdateItem"],
                  "Resource": {
                    "Fn::Sub": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/requests*"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": "states:StartExecution",
                  "Resource": {
                    "Ref": "RevokeStateMachine"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:Get*",
                    "iam:List*",
                    "iam:CreateRole",
                    "iam:DeleteRole",
                    "iam:DetachRolePolicy"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": {
                    "Ref": "functionteamStatusArn"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "TEAMRevokeSMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["states.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "TEAMStepFunctionRolePolicy1",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogDelivery",
                    "logs:GetLogDelivery",
                    "logs:UpdateLogDelivery",
                    "logs:DeleteLogDelivery",
                    "logs:ListLogDeliveries",
                    "logs:PutResourcePolicy",
                    "logs:DescribeResourcePolicies",
                    "logs:DescribeLogGroups"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "ses:SendEmail",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "sns:Publish",
                  "Resource": {
                    "Fn::ImportValue": "NotificationTopicArn"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": ["sso:DeleteAccountAssignment"],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": ["dynamodb:UpdateItem", "dynamodb:GetItem"],
                  "Resource": {
                    "Fn::Sub": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/requests*"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:Get*",
                    "iam:List*",
                    "iam:CreateRole",
                    "iam:DeleteRole",
                    "iam:DetachRolePolicy"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": {
                    "Ref": "functionteamStatusArn"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "TEAMRejectSMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["states.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "TEAMStepFunctionRolePolicy1",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogDelivery",
                    "logs:GetLogDelivery",
                    "logs:UpdateLogDelivery",
                    "logs:DeleteLogDelivery",
                    "logs:ListLogDeliveries",
                    "logs:PutResourcePolicy",
                    "logs:DescribeResourcePolicies",
                    "logs:DescribeLogGroups"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "ses:SendEmail",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "sns:Publish",
                  "Resource": {
                    "Fn::ImportValue": "NotificationTopicArn"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": {
                    "Ref": "functionteamStatusArn"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "TEAMStateMachineLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/stepfunction/team-step-function/${env}"
        },
        "KmsKeyId": {
          "Fn::GetAtt": ["LogGroupKey", "Arn"]
        },
        "RetentionInDays": 14
      }
    },
    "LogGroupKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "TEAM Stepfunction CloudwatchLog Key",
        "EnableKeyRotation": true,
        "PendingWindowInDays": 20,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "key-default-1",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:root"
                }
              },
              "Action": "kms:*",
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Sub": "logs.${AWS::Region}.amazonaws.com"
                }
              },
              "Action": [
                "kms:Encrypt*",
                "kms:Decrypt*",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:Describe*"
              ],
              "Resource": "*",
              "Condition": {
                "ArnEquals": {
                  "kms:EncryptionContext:aws:logs:arn": {
                    "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/stepfunction/team-step-function/${env}"
                  }
                }
              }
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "GrantSMOutput": {
      "Description": "TEAM Grant StateMachine ",
      "Value": {
        "Ref": "GrantStateMachine"
      }
    },
    "RevokeSMOutput": {
      "Description": "TEAM Revoke StateMachine ",
      "Value": {
        "Ref": "RevokeStateMachine"
      }
    },
    "RejectSMOutput": {
      "Description": "TEAM Reject StateMachine ",
      "Value": {
        "Ref": "RejectStateMachine"
      }
    },
    "ScheduleSMOutput": {
      "Description": "TEAM Schedule StateMachine ",
      "Value": {
        "Ref": "ScheduleStateMachine"
      }
    },
    "ApprovalSMOutput": {
      "Description": "TEAM Approval StateMachine ",
      "Value": {
        "Ref": "ApprovalStateMachine"
      }
    }
  },
  "Description": "{\"createdOn\":\"Linux\",\"createdBy\":\"Amplify\",\"createdWith\":\"9.2.1\",\"stackType\":\"custom-customCloudformation\",\"metadata\":{}}"
}
