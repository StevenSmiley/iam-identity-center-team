{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "env": {
      "Type": "String"
    },
    "functionteamStatusArn": {
      "Type": "String",
      "Description": "Input parameter describing Arn attribute for function/teamStatus resource"
    },
    "functionteamNotifySlackArn": {
      "Type": "String",
      "Description": "Input parameter describing Arn attribute for function/teamNotifySlack resource"
    }
  },
  "Resources": {
    "GrantStateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "StateMachineName": {
          "Fn::Join": [
            "-",
            [
              "TEAM-Grant-SM",
              {
                "Ref": "env"
              }
            ]
          ]
        },
        "Definition": {
          "Comment": "Temporary Elevated Access Management - Grant state machine",
          "StartAt": "Grant Permission",
          "States": {
            "DynamoDB UpdateStartTime": {
              "Next": "Grant Error?",
              "Parameters": {
                "ExpressionAttributeValues": {
                  ":time": {
                    "S.$": "$$.State.EnteredTime"
                  }
                },
                "Key": {
                  "id": {
                    "S.$": "$.id"
                  }
                },
                "TableName.$": "$.requests_table",
                "UpdateExpression": "SET startTime = :time"
              },
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "ResultPath": "$.lastTaskResult",
              "Type": "Task"
            },
            "Grant Error?": {
              "Choices": [
                {
                  "IsPresent": true,
                  "Next": "Notify Error - Notification Type",
                  "Variable": "$.statusError"
                }
              ],
              "Default": "Notify Requester Started - Notification Type",
              "Type": "Choice"
            },
            "Grant Permission": {
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Update Request Status - in progress",
                  "ResultPath": "$.statusError"
                }
              ],
              "Next": "Update Request Status - in progress",
              "Parameters": {
                "InstanceArn.$": "$.instanceARN",
                "PermissionSetArn.$": "$.roleId",
                "PrincipalId.$": "$.userId",
                "PrincipalType": "USER",
                "TargetId.$": "$.accountId",
                "TargetType": "AWS_ACCOUNT"
              },
              "Resource": "arn:aws:states:::aws-sdk:ssoadmin:createAccountAssignment",
              "ResultPath": "$.grant",
              "Type": "Task"
            },
            "Notify Error - Notification Type": {
              "Choices": [
                {
                  "Next": "Notify Error - SNS",
                  "StringEquals": "SNS",
                  "Variable": "$.notification_service"
                },
                {
                  "Next": "Notify Error - SES",
                  "StringEquals": "SES",
                  "Variable": "$.notification_service"
                },
                {
                  "Variable": "$.notification_service",
                  "StringEquals": "Slack",
                  "Next": "Notify Error - Slack"
                }
              ],
              "Default": "Pass",
              "Type": "Choice"
            },
            "Notify Error - SES": {
              "End": true,
              "Parameters": {
                "Destination": {
                  "CcAddresses.$": "States.Array($.email)",
                  "ToAddresses.$": "States.Array($.ses_source_email)"
                },
                "Message": {
                  "Body": {
                    "Html": {
                      "Charset": "UTF-8",
                      "Data.$": "States.Format('<html><body>This is an error notification for TEAM elevated access request to account <b>{}({})</b> for <b>{}</b><p> The permission set <b>{}</b> has not been successfully attached to the requester entity. </p><p><p>Use the request info below to review step function workflow logs to troubleshoot the error.</p><b><u>Request info</u></b><p>Step function workflow name: <b>{}</b><p>Step function execution name: <b>{}</b></p><p>Step function execution Id: <b>{}</b></body></html>',$.accountName,$.accountId,$.email,$.role,$$.StateMachine.Name,$$.Execution.Name,$$.Execution.Id)"
                    }
                  },
                  "Subject": {
                    "Data.$": "States.Format('Error Notification - TEAM elevated access request for {} to AWS account {}({})',$.email,$.accountName,$.accountId)"
                  }
                },
                "Source.$": "States.Array($.ses_source_email)",
                "SourceArn.$": "States.Array($.ses_source_arn)"
              },
              "Resource": "arn:aws:states:::aws-sdk:ses:sendEmail",
              "ResultPath": "$.lastTaskResult",
              "Type": "Task"
            },
            "Notify Error - SNS": {
              "End": true,
              "Parameters": {
                "Message.$": "$",
                "TopicArn.$": "$.notification_topic_arn"
              },
              "Resource": "arn:aws:states:::sns:publish",
              "ResultPath": "$.lastTaskResult",
              "Type": "Task"
            },
            "Notify Requester Started - Notification Type": {
              "Choices": [
                {
                  "Next": "Notify Started - SNS",
                  "StringEquals": "SNS",
                  "Variable": "$.notification_service"
                },
                {
                  "Next": "Notify Started - SES",
                  "StringEquals": "SES",
                  "Variable": "$.notification_service"
                },
                {
                  "Variable": "$.notification_service",
                  "StringEquals": "Slack",
                  "Next": "Notify Started - Slack"
                }
              ],
              "Default": "Wait",
              "Type": "Choice"
            },
            "Notify Started - SES": {
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Wait",
                  "ResultPath": "$.error"
                }
              ],
              "Next": "Wait",
              "Parameters": {
                "Destination": {
                  "CcAddresses.$": "$.approvers",
                  "ToAddresses.$": "States.Array($.email)"
                },
                "Message": {
                  "Body": {
                    "Html": {
                      "Charset": "UTF-8",
                      "Data.$": "States.Format('<html><body>TEAM elevated access for {} to account {}({}) is <b>in progress</b> and would expire in <b>{} hours</b><p>You will get a notification when elevated access expires</p></body></html>',$.email,$.accountName,$.accountId,$.time)"
                    }
                  },
                  "Subject": {
                    "Data.$": "States.Format('TEAM elevated access request for {} to Account {}({}) has started',$.email,$.accountName,$.accountId)"
                  }
                },
                "Source.$": "States.Array($.ses_source_email)",
                "SourceArn.$": "States.Array($.ses_source_arn)"
              },
              "Resource": "arn:aws:states:::aws-sdk:ses:sendEmail",
              "ResultPath": "$.lastTaskResult",
              "Type": "Task"
            },
            "Notify Started - SNS": {
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Wait",
                  "ResultPath": "$.error"
                }
              ],
              "Next": "Wait",
              "Parameters": {
                "Message.$": "$",
                "TopicArn.$": "$.notification_topic_arn"
              },
              "Resource": "arn:aws:states:::sns:publish",
              "ResultPath": "$.lastTaskResult",
              "Type": "Task"
            },
            "Pass": {
              "End": true,
              "Type": "Pass"
            },
            "Revoke Permission": {
              "End": true,
              "Parameters": {
                "Input.$": "$",
                "StateMachineArn.$": "$.revoke_sm"
              },
              "Resource": "arn:aws:states:::states:startExecution",
              "Type": "Task"
            },
            "Update Request Status - in progress": {
              "Next": "DynamoDB UpdateStartTime",
              "Parameters": {
                "FunctionName.$": "$.fn_teamstatus_arn",
                "Payload.$": "$"
              },
              "Resource": "arn:aws:states:::lambda:invoke",
              "ResultPath": "$.lastTaskResult",
              "Retry": [
                {
                  "BackoffRate": 2,
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6
                }
              ],
              "Type": "Task"
            },
            "Wait": {
              "Next": "Revoke Permission",
              "SecondsPath": "$.duration",
              "Type": "Wait"
            },
            "Notify Started - Slack": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName.$": "$.fn_teamnotifyslack_arn"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Wait",
              "ResultPath": "$.lastTaskResult",
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Wait",
                  "ResultPath": "$.error"
                }
              ]
            },
            "Notify Error - Slack": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName.$": "$.fn_teamnotifyslack_arn"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "ResultPath": "$.lastTaskResult",
              "End": true
            }
          }
        },
        "RoleArn": {
          "Fn::GetAtt": ["TEAMGrantSMRole", "Arn"]
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": ["TEAMStateMachineLogGroup", "Arn"]
                }
              }
            }
          ],
          "IncludeExecutionData": true,
          "Level": "ALL"
        },
        "TracingConfiguration": {
          "Enabled": true
        }
      }
    },
    "ScheduleStateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "StateMachineName": {
          "Fn::Join": [
            "-",
            [
              "TEAM-Schedule-SM",
              {
                "Ref": "env"
              }
            ]
          ]
        },
        "Definition": {
          "Comment": "Temporary Elevated Access Management - Schedule state machine",
          "StartAt": "Update Request Status - scheduled",
          "States": {
            "DynamoDB GetStatus": {
              "Next": "Scheduled?",
              "Parameters": {
                "Key": {
                  "id": {
                    "S.$": "$.id"
                  }
                },
                "TableName.$": "$.requests_table"
              },
              "Resource": "arn:aws:states:::dynamodb:getItem",
              "ResultPath": "$.result",
              "Type": "Task"
            },
            "Grant Permission": {
              "End": true,
              "Parameters": {
                "Input.$": "$",
                "StateMachineArn.$": "$.grant_sm"
              },
              "Resource": "arn:aws:states:::states:startExecution",
              "Type": "Task"
            },
            "Notify Requester Scheduled - Notification Type": {
              "Choices": [
                {
                  "Next": "Notify Requester Scheduled - SNS",
                  "StringEquals": "SNS",
                  "Variable": "$.notification_service"
                },
                {
                  "Next": "Notify Requester Scheduled - SES",
                  "StringEquals": "SES",
                  "Variable": "$.notification_service"
                },
                {
                  "Variable": "$.notification_service",
                  "StringEquals": "Slack",
                  "Next": "Notify Requester Scheduled - Slack"
                }
              ],
              "Default": "Schedule",
              "Type": "Choice"
            },
            "Notify Requester Scheduled - SES": {
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Schedule",
                  "ResultPath": "$.error"
                }
              ],
              "Next": "Schedule",
              "Parameters": {
                "Destination": {
                  "ToAddresses.$": "States.Array($.email)"
                },
                "Message": {
                  "Body": {
                    "Html": {
                      "Charset": "UTF-8",
                      "Data.$": "States.Format('<html><body><h4>TEAM elevated access request for {} to AWS account {}({}) has been <b>approved</b> for {} hour </h4><p> You will get a notification when elevated access has started </p></body></html>',$.email,$.accountName,$.accountId,$.time)"
                    }
                  },
                  "Subject": {
                    "Data.$": "States.Format('TEAM elevated access request for {} to AWS account - {}({}) approved', $.email, $.accountName,$.accountId)"
                  }
                },
                "Source.$": "States.Array($.ses_source_email)",
                "SourceArn.$": "States.Array($.ses_source_arn)"
              },
              "Resource": "arn:aws:states:::aws-sdk:ses:sendEmail",
              "ResultPath": "$.lastTaskResult",
              "Type": "Task"
            },
            "Notify Requester Scheduled - SNS": {
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Schedule",
                  "ResultPath": "$.error"
                }
              ],
              "Next": "Schedule",
              "Parameters": {
                "Message.$": "$",
                "TopicArn.$": "$.notification_topic_arn"
              },
              "Resource": "arn:aws:states:::sns:publish",
              "ResultPath": "$.lastTaskResult",
              "Type": "Task"
            },
            "Pass": {
              "End": true,
              "Type": "Pass"
            },
            "Scheduled?": {
              "Choices": [
                {
                  "Next": "Grant Permission",
                  "StringEquals": "scheduled",
                  "Variable": "$.result.Item.status.S"
                }
              ],
              "Default": "Pass",
              "Type": "Choice"
            },
            "Update Request Status - scheduled": {
              "Next": "Notify Requester Scheduled - Notification Type",
              "Parameters": {
                "FunctionName.$": "$.fn_teamstatus_arn",
                "Payload.$": "$"
              },
              "Resource": "arn:aws:states:::lambda:invoke",
              "ResultPath": "$.lastTaskResult",
              "Retry": [
                {
                  "BackoffRate": 2,
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6
                }
              ],
              "Type": "Task"
            },
            "Schedule": {
              "Next": "DynamoDB GetStatus",
              "TimestampPath": "$.startTime",
              "Type": "Wait"
            },
            "Notify Requester Scheduled - Slack": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName.$": "$.fn_teamnotifyslack_arn"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Schedule",
              "ResultPath": "$.lastTaskResult",
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Schedule",
                  "ResultPath": "$.error"
                }
              ]
            }
          }
        },
        "RoleArn": {
          "Fn::GetAtt": ["TEAMScheduleSMRole", "Arn"]
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": ["TEAMStateMachineLogGroup", "Arn"]
                }
              }
            }
          ],
          "IncludeExecutionData": true,
          "Level": "ALL"
        },
        "TracingConfiguration": {
          "Enabled": true
        }
      }
    },
    "RejectStateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "StateMachineName": {
          "Fn::Join": [
            "-",
            [
              "TEAM-Reject-SM",
              {
                "Ref": "env"
              }
            ]
          ]
        },
        "Definition": {
          "Comment": "Temporary Elevated Access Management - Reject state machine",
          "StartAt": "Status?",
          "States": {
            "Notify Requester Cancelled - Notification Type": {
              "Choices": [
                {
                  "Next": "Notify Requester Cancelled - SNS",
                  "StringEquals": "SNS",
                  "Variable": "$.notification_service"
                },
                {
                  "Next": "Notify Requester Cancelled - SES",
                  "StringEquals": "SES",
                  "Variable": "$.notification_service"
                },
                {
                  "Variable": "$.notification_service",
                  "StringEquals": "Slack",
                  "Next": "Notify Requester Cancelled - Slack"
                }
              ],
              "Default": "Success",
              "Type": "Choice"
            },
            "Notify Requester Cancelled - SES": {
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Success",
                  "ResultPath": "$.error"
                }
              ],
              "Next": "Success",
              "Parameters": {
                "Destination": {
                  "CcAddresses.$": "States.Array($.email)",
                  "ToAddresses.$": "$.approvers"
                },
                "Message": {
                  "Body": {
                    "Html": {
                      "Charset": "UTF-8",
                      "Data.$": "States.Format('<html><body>TEAM elevated access approval request for <b>{}</b> to account <b>{}({})</b> has been <b>cancelled</b> by the requester </body></html>',$.email,$.accountName,$.accountId)"
                    }
                  },
                  "Subject": {
                    "Data.$": "States.Format('TEAM elevated access request for {} to account {}({}) cancelled', $.email,$.accountName,$.accountId)"
                  }
                },
                "Source.$": "States.Array($.ses_source_email)",
                "SourceArn.$": "States.Array($.ses_source_arn)"
              },
              "Resource": "arn:aws:states:::aws-sdk:ses:sendEmail",
              "ResultPath": "$.lastTaskResult",
              "Type": "Task"
            },
            "Notify Requester Cancelled - SNS": {
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Success",
                  "ResultPath": "$.error"
                }
              ],
              "Next": "Success",
              "Parameters": {
                "Message.$": "$",
                "TopicArn.$": "$.notification_topic_arn"
              },
              "Resource": "arn:aws:states:::sns:publish",
              "ResultPath": "$.lastTaskResult",
              "Type": "Task"
            },
            "Notify Requester Rejected - Notification Type": {
              "Choices": [
                {
                  "Next": "Notify Requester Rejected - SNS",
                  "StringEquals": "SNS",
                  "Variable": "$.notification_service"
                },
                {
                  "Next": "Notify Requester Rejected - SES",
                  "StringEquals": "SES",
                  "Variable": "$.notification_service"
                },
                {
                  "Variable": "$.notification_service",
                  "StringEquals": "Slack",
                  "Next": "Notify Requester Rejected - Slack"
                }
              ],
              "Default": "Success",
              "Type": "Choice"
            },
            "Notify Requester Rejected - SES": {
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Success",
                  "ResultPath": "$.error"
                }
              ],
              "Next": "Success",
              "Parameters": {
                "Destination": {
                  "ToAddresses.$": "States.Array($.email)"
                },
                "Message": {
                  "Body": {
                    "Html": {
                      "Charset": "UTF-8",
                      "Data.$": "States.Format('<html><body>TEAM elevated access request for <b>{}</b> to account <b>{}({})</b> has been <b>rejected</b><p> Check your TEAM request details for more information </p></body></html>',$.email,$.accountName,$.accountId)"
                    }
                  },
                  "Subject": {
                    "Data.$": "States.Format('TEAM elevated access request for {} to AWS account {}({}) rejected', $.email,$.accountName,$.accountId)"
                  }
                },
                "Source.$": "States.Array($.ses_source_email)",
                "SourceArn.$": "States.Array($.ses_source_arn)"
              },
              "Resource": "arn:aws:states:::aws-sdk:ses:sendEmail",
              "ResultPath": "$.lastTaskResult",
              "Type": "Task"
            },
            "Notify Requester Rejected - SNS": {
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Success",
                  "ResultPath": "$.error"
                }
              ],
              "Next": "Success",
              "Parameters": {
                "Message.$": "$",
                "TopicArn.$": "$.notification_topic_arn"
              },
              "Resource": "arn:aws:states:::sns:publish",
              "ResultPath": "$.lastTaskResult",
              "Type": "Task"
            },
            "Status?": {
              "Choices": [
                {
                  "Next": "Notify Requester Cancelled - Notification Type",
                  "StringEquals": "cancelled",
                  "Variable": "$.status"
                },
                {
                  "Next": "Notify Requester Rejected - Notification Type",
                  "StringEquals": "rejected",
                  "Variable": "$.status"
                }
              ],
              "Type": "Choice"
            },
            "Success": {
              "Type": "Succeed"
            },
            "Notify Requester Cancelled - Slack": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName.$": "$.fn_teamnotifyslack_arn"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Success",
              "ResultPath": "$.lastTaskResult",
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Success",
                  "ResultPath": "$.error"
                }
              ]
            },
            "Notify Requester Rejected - Slack": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName.$": "$.fn_teamnotifyslack_arn"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "ResultPath": "$.lastTaskResult",
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Success",
                  "ResultPath": "$.error"
                }
              ],
              "Next": "Success"
            }
          }
        },
        "RoleArn": {
          "Fn::GetAtt": ["TEAMRejectSMRole", "Arn"]
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": ["TEAMStateMachineLogGroup", "Arn"]
                }
              }
            }
          ],
          "IncludeExecutionData": true,
          "Level": "ALL"
        },
        "TracingConfiguration": {
          "Enabled": true
        }
      }
    },
    "RevokeStateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "StateMachineName": {
          "Fn::Join": [
            "-",
            [
              "TEAM-Revoke-SM",
              {
                "Ref": "env"
              }
            ]
          ]
        },
        "Definition": {
          "Comment": "Temporary Elevated Access Management - Revoke state machine",
          "StartAt": "DynamoDB GetStatus",
          "States": {
            "DynamoDB GetStatus": {
              "Next": "Revoked?",
              "Parameters": {
                "Key": {
                  "id": {
                    "S.$": "$.id"
                  }
                },
                "TableName.$": "$.requests_table"
              },
              "Resource": "arn:aws:states:::dynamodb:getItem",
              "ResultPath": "$.data",
              "Type": "Task"
            },
            "DynamoDB Update EndTime": {
              "End": true,
              "Parameters": {
                "ExpressionAttributeValues": {
                  ":time": {
                    "S.$": "$$.State.EnteredTime"
                  }
                },
                "Key": {
                  "id": {
                    "S.$": "$.id"
                  }
                },
                "TableName.$": "$.requests_table",
                "UpdateExpression": "SET endTime = :time"
              },
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Type": "Task"
            },
            "Notify Error - Notification Type": {
              "Choices": [
                {
                  "Next": "Notify Error - SNS",
                  "StringEquals": "SNS",
                  "Variable": "$.notification_service"
                },
                {
                  "Next": "Notify Error - SES",
                  "StringEquals": "SES",
                  "Variable": "$.notification_service"
                },
                {
                  "Variable": "$.notification_service",
                  "StringEquals": "Slack",
                  "Next": "Notify Error - Slack"
                }
              ],
              "Default": "Pass",
              "Type": "Choice"
            },
            "Notify Error - SES": {
              "End": true,
              "Parameters": {
                "Destination": {
                  "CcAddresses.$": "$.approvers",
                  "ToAddresses.$": "States.Array($.ses_source_email)"
                },
                "Message": {
                  "Body": {
                    "Html": {
                      "Charset": "UTF-8",
                      "Data.$": "States.Format('<html><body>This is an Error notification for TEAM elevated access request to AWS account - {}({}) for {}<p> The permission set <b>{}</b>has not been successfully removed from the requester entity. </p><p>Use the request info below to review step function workflow logs to troubleshoot the error.</p><b><u>Request info</u></b><p>Step function workflow name: <b>{}</b><p>Step function execution name: <b>{}</b></p><p>Step function execution Id: <b>{}</b></body></html>',$.accountName,$.accountId,$.email,$.role,$$.StateMachine.Name,$$.Execution.Name,$$.Execution.Id)"
                    }
                  },
                  "Subject": {
                    "Data.$": "States.Format('Error Notification - TEAM Request for {} to AWS account - {}({})',$.email,$.accountName,$.accountId)"
                  }
                },
                "Source.$": "States.Array($.ses_source_email)",
                "SourceArn.$": "States.Array($.ses_source_arn)"
              },
              "Resource": "arn:aws:states:::aws-sdk:ses:sendEmail",
              "ResultPath": "$.lastTaskResult",
              "Type": "Task"
            },
            "Notify Error - SNS": {
              "End": true,
              "Parameters": {
                "Message.$": "$",
                "TopicArn.$": "$.notification_topic_arn"
              },
              "Resource": "arn:aws:states:::sns:publish",
              "ResultPath": "$.lastTaskResult",
              "Type": "Task"
            },
            "Notify Requester Session Ended - Notification Type": {
              "Choices": [
                {
                  "Next": "Notify Requester Session Ended - SNS",
                  "StringEquals": "SNS",
                  "Variable": "$.notification_service"
                },
                {
                  "Next": "Notify Requester Session Ended - SES",
                  "StringEquals": "SES",
                  "Variable": "$.notification_service"
                },
                {
                  "Variable": "$.notification_service",
                  "StringEquals": "Slack",
                  "Next": "Notify Requester Session Ended - Slack"
                }
              ],
              "Default": "Revoked || Ended ?",
              "Type": "Choice"
            },
            "Notify Requester Session Ended - SES": {
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Revoked || Ended ?",
                  "ResultPath": "$.error"
                }
              ],
              "Next": "Revoked || Ended ?",
              "Parameters": {
                "Destination": {
                  "CcAddresses.$": "$.approvers",
                  "ToAddresses.$": "States.Array($.email)"
                },
                "Message": {
                  "Body": {
                    "Html": {
                      "Charset": "UTF-8",
                      "Data.$": "States.Format('<html><body>TEAM elevated access for <b>{}</b> to AWS account - <b>{}({})</b> has <b>ended</b><p> Elevated access has been removed </p><p>Login to <a href=\"{}\">TEAM Application</a> to view session activity logs</p></body></html>',$.email,$.accountName,$.accountId,$.sso_login_url)"
                    }
                  },
                  "Subject": {
                    "Data.$": "States.Format('TEAM elevated access request for {} to AWS account - {}({}) has ended',$.email,$.accountName,$.accountId)"
                  }
                },
                "Source.$": "States.Array($.ses_source_email)",
                "SourceArn.$": "States.Array($.ses_source_arn)"
              },
              "Resource": "arn:aws:states:::aws-sdk:ses:sendEmail",
              "ResultPath": "$.lastTaskResult",
              "Type": "Task"
            },
            "Notify Requester Session Ended - SNS": {
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Revoked || Ended ?",
                  "ResultPath": "$.error"
                }
              ],
              "Next": "Revoked || Ended ?",
              "Parameters": {
                "Message.$": "$",
                "TopicArn.$": "$.notification_topic_arn"
              },
              "Resource": "arn:aws:states:::sns:publish",
              "ResultPath": "$.lastTaskResult",
              "Type": "Task"
            },
            "Pass": {
              "End": true,
              "Type": "Pass"
            },
            "Revoke Error?": {
              "Choices": [
                {
                  "IsPresent": true,
                  "Next": "Notify Error - Notification Type",
                  "Variable": "$.statusError"
                }
              ],
              "Default": "DynamoDB Update EndTime",
              "Type": "Choice"
            },
            "Revoke Permission": {
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Update Request Status",
                  "ResultPath": "$.statusError"
                }
              ],
              "Next": "Notify Requester Session Ended - Notification Type",
              "Parameters": {
                "InstanceArn.$": "$.instanceARN",
                "PermissionSetArn.$": "$.roleId",
                "PrincipalId.$": "$.userId",
                "PrincipalType": "USER",
                "TargetId.$": "$.accountId",
                "TargetType": "AWS_ACCOUNT"
              },
              "Resource": "arn:aws:states:::aws-sdk:ssoadmin:deleteAccountAssignment",
              "ResultPath": "$.revoke",
              "Type": "Task"
            },
            "Revoked?": {
              "Choices": [
                {
                  "And": [
                    {
                      "StringEquals": "revoked",
                      "Variable": "$.data.Item.status.S "
                    },
                    {
                      "IsPresent": true,
                      "Variable": "$.result"
                    }
                  ],
                  "Next": "Pass"
                }
              ],
              "Default": "Revoke Permission",
              "Type": "Choice"
            },
            "Revoked || Ended ?": {
              "Choices": [
                {
                  "Next": "DynamoDB Update EndTime",
                  "StringEquals": "revoked",
                  "Variable": "$.data.Item.status.S"
                }
              ],
              "Default": "Update Request Status",
              "Type": "Choice"
            },
            "Update Request Status": {
              "Next": "Revoke Error?",
              "Parameters": {
                "FunctionName.$": "$.fn_teamstatus_arn",
                "Payload.$": "$"
              },
              "Resource": "arn:aws:states:::lambda:invoke",
              "ResultPath": "$.lastTaskResult",
              "Retry": [
                {
                  "BackoffRate": 2,
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6
                }
              ],
              "Type": "Task"
            },
            "Notify Requester Session Ended - Slack": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName.$": "$.fn_teamnotifyslack_arn"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Revoked || Ended ?",
              "ResultPath": "$.lastTaskResult",
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Revoked || Ended ?",
                  "ResultPath": "$.error"
                }
              ]
            },
            "Notify Error - Slack": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName.$": "$.fn_teamnotifyslack_arn"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "ResultPath": "$.lastTaskResult",
              "End": true
            }
          }
        },
        "RoleArn": {
          "Fn::GetAtt": ["TEAMRevokeSMRole", "Arn"]
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": ["TEAMStateMachineLogGroup", "Arn"]
                }
              }
            }
          ],
          "IncludeExecutionData": true,
          "Level": "ALL"
        },
        "TracingConfiguration": {
          "Enabled": true
        }
      }
    },
    "ApprovalStateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "StateMachineName": {
          "Fn::Join": [
            "-",
            [
              "TEAM-Approval-SM",
              {
                "Ref": "env"
              }
            ]
          ]
        },
        "Definition": {
          "Comment": "Temporary Elevated Access Management -  Approval state machine",
          "StartAt": "Notify Approvers Pending - Notification Type",
          "States": {
            "DynamoDB GetStatus": {
              "Next": "Pending?",
              "Parameters": {
                "Key": {
                  "id": {
                    "S.$": "$.id"
                  }
                },
                "TableName.$": "$.requests_table"
              },
              "Resource": "arn:aws:states:::dynamodb:getItem",
              "ResultPath": "$.result",
              "Type": "Task"
            },
            "Notify Approvers Pending - Notification Type": {
              "Choices": [
                {
                  "Next": "Notify Approvers Pending - SNS",
                  "StringEquals": "SNS",
                  "Variable": "$.notification_service"
                },
                {
                  "And": [
                    {
                      "Variable": "$.notification_service",
                      "StringEquals": "SES"
                    },
                    {
                      "Variable": "$.ses_source_arn",
                      "StringEquals": ""
                    }
                  ],
                  "Next": "Notify Approvers Pending - SES"
                },
                {
                  "Next": "Notify Approvers Pending - Slack",
                  "StringEquals": "Slack",
                  "Variable": "$.notification_service"
                },
                {
                  "And": [
                    {
                      "Variable": "$.notification_service",
                      "StringEquals": "SES"
                    },
                    {
                      "Not": {
                        "Variable": "$.ses_source_arn",
                        "StringEquals": ""
                      }
                    }
                  ],
                  "Next": "Notify Approvers Pending - SES CrossAccount"
                }
              ],
              "Default": "Wait",
              "Type": "Choice"
            },
            "Notify Approvers Pending - SES": {
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Wait",
                  "ResultPath": "$.error"
                }
              ],
              "Next": "Wait",
              "Parameters": {
                "Destination": {
                  "CcAddresses.$": "States.Array($.email)",
                  "ToAddresses.$": "$.approvers"
                },
                "Message": {
                  "Body": {
                    "Html": {
                      "Charset": "UTF-8",
                      "Data.$": "States.Format('<html><body><p>This is a TEAM approval request for <b>{}</b> to AWS account <b>{}({})</b></p><p><u><b>Session Length:</u></b> {}Hrs </p><p><u><b>Business Justification:</u></b> {} </p><p>Login to <a href=\"{}\">TEAM Application</a> to <b>approve or reject</b> request</p> </body></html>',$.email,$.accountName,$.accountId,$.time,$.justification,$.sso_login_url)"
                    }
                  },
                  "Subject": {
                    "Data.$": "States.Format('TEAM elevated access approval request for {} to AWS account - {}({})', $.email,$.accountName,$.accountId)"
                  }
                },
                "Source.$": "$.ses_source_email"
              },
              "Resource": "arn:aws:states:::aws-sdk:ses:sendEmail",
              "ResultPath": "$.lastTaskResult",
              "Type": "Task"
            },
            "Notify Approvers Pending - SNS": {
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Wait",
                  "ResultPath": "$.error"
                }
              ],
              "Next": "Wait",
              "Parameters": {
                "Message.$": "$",
                "TopicArn.$": "$.notification_topic_arn"
              },
              "Resource": "arn:aws:states:::sns:publish",
              "ResultPath": "$.lastTaskResult",
              "Type": "Task"
            },
            "Notify Approvers Pending - Slack": {
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Wait",
                  "ResultPath": "$.error"
                }
              ],
              "Next": "Wait",
              "Parameters": {
                "FunctionName.$": "$.fn_teamnotifyslack_arn",
                "Payload.$": "$"
              },
              "Resource": "arn:aws:states:::lambda:invoke",
              "ResultPath": "$.lastTaskResult",
              "Type": "Task"
            },
            "Notify Requester Expired - Notification Type": {
              "Choices": [
                {
                  "Next": "Notify Requester Expired - SNS",
                  "StringEquals": "SNS",
                  "Variable": "$.notification_service"
                },
                {
                  "And": [
                    {
                      "Variable": "$.notification_service",
                      "StringEquals": "SES"
                    },
                    {
                      "Variable": "$.ses_source_arn",
                      "StringEquals": ""
                    }
                  ],
                  "Next": "Notify Requester Expired - SES"
                },
                {
                  "Next": "Notify Requester Expired - Slack",
                  "StringEquals": "Slack",
                  "Variable": "$.notification_service"
                },
                {
                  "And": [
                    {
                      "Variable": "$.notification_service",
                      "StringEquals": "SES"
                    },
                    {
                      "Not": {
                        "Variable": "$.ses_source_arn",
                        "StringEquals": ""
                      }
                    }
                  ],
                  "Next": "Notify Requester Expired - SES CrossAccount"
                }
              ],
              "Default": "Pass",
              "Type": "Choice"
            },
            "Notify Requester Expired - SES": {
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Pass",
                  "ResultPath": "$.error"
                }
              ],
              "Parameters": {
                "Destination": {
                  "CcAddresses.$": "$.approvers",
                  "ToAddresses.$": "States.Array($.email)"
                },
                "Message": {
                  "Body": {
                    "Html": {
                      "Charset": "UTF-8",
                      "Data.$": "States.Format('<html><body><h4>TEAM elevated access request to AWS account - {} has Expired</h4><p> Contact your TEAM Administrator or Create New Request</p></body></html>',$.accountName)"
                    }
                  },
                  "Subject": {
                    "Data.$": "States.Format('TEAM elevated access request for {} to AWS account - {}({}) expired',$.email,$.accountName,$.accountId)"
                  }
                },
                "Source.$": "$.ses_source_email"
              },
              "Resource": "arn:aws:states:::aws-sdk:ses:sendEmail",
              "ResultPath": "$.lastTaskResult",
              "Type": "Task",
              "End": true
            },
            "Notify Requester Expired - SNS": {
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Pass"
                }
              ],
              "End": true,
              "Parameters": {
                "Message.$": "$",
                "TopicArn.$": "$.notification_topic_arn"
              },
              "Resource": "arn:aws:states:::sns:publish",
              "ResultPath": "$.lastTaskResult",
              "Type": "Task"
            },
            "Notify Requester Expired - Slack": {
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Pass",
                  "ResultPath": "$.error"
                }
              ],
              "End": true,
              "Parameters": {
                "FunctionName.$": "$.fn_teamnotifyslack_arn",
                "Payload.$": "$"
              },
              "Resource": "arn:aws:states:::lambda:invoke",
              "ResultPath": "$.lastTaskResult",
              "Type": "Task"
            },
            "Pass": {
              "End": true,
              "Type": "Pass"
            },
            "Pending?": {
              "Choices": [
                {
                  "Next": "Update Request Status",
                  "StringEquals": "pending",
                  "Variable": "$.result.Item.status.S"
                }
              ],
              "Default": "Pass",
              "Type": "Choice"
            },
            "Update Request Status": {
              "Next": "Notify Requester Expired - Notification Type",
              "Parameters": {
                "FunctionName.$": "$.fn_teamstatus_arn",
                "Payload.$": "$"
              },
              "Resource": "arn:aws:states:::lambda:invoke",
              "ResultPath": "$.Payload",
              "Retry": [
                {
                  "BackoffRate": 2,
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6
                }
              ],
              "Type": "Task"
            },
            "Wait": {
              "Next": "DynamoDB GetStatus",
              "SecondsPath": "$.expire",
              "Type": "Wait"
            },
            "Notify Approvers Pending - SES CrossAccount": {
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Wait",
                  "ResultPath": "$.error"
                }
              ],
              "Parameters": {
                "Destination": {
                  "CcAddresses.$": "States.Array($.email)",
                  "ToAddresses.$": "$.approvers"
                },
                "Message": {
                  "Body": {
                    "Html": {
                      "Charset": "UTF-8",
                      "Data.$": "States.Format('<html><body><p>This is a TEAM approval request for <b>{}</b> to AWS account <b>{}({})</b></p><p><u><b>Session Length:</u></b> {}Hrs </p><p><u><b>Business Justification:</u></b> {} </p><p>Login to <a href=\"{}\">TEAM Application</a> to <b>approve or reject</b> request</p> </body></html>',$.email,$.accountName,$.accountId,$.time,$.justification,$.sso_login_url)"
                    }
                  },
                  "Subject": {
                    "Data.$": "States.Format('TEAM elevated access approval request for {} to AWS account - {}({})', $.email,$.accountName,$.accountId)"
                  }
                },
                "Source.$": "$.ses_source_email",
                "SourceArn.$": "$.ses_source_arn"
              },
              "Resource": "arn:aws:states:::aws-sdk:ses:sendEmail",
              "ResultPath": "$.lastTaskResult",
              "Type": "Task",
              "Next": "Wait"
            },
            "Notify Requester Expired - SES CrossAccount": {
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Pass",
                  "ResultPath": "$.error"
                }
              ],
              "End": true,
              "Parameters": {
                "Destination": {
                  "CcAddresses.$": "$.approvers",
                  "ToAddresses.$": "States.Array($.email)"
                },
                "Message": {
                  "Body": {
                    "Html": {
                      "Charset": "UTF-8",
                      "Data.$": "States.Format('<html><body><h4>TEAM elevated access request to AWS account - {} has Expired</h4><p> Contact your TEAM Administrator or Create New Request</p></body></html>',$.accountName)"
                    }
                  },
                  "Subject": {
                    "Data.$": "States.Format('TEAM elevated access request for {} to AWS account - {}({}) expired',$.email,$.accountName,$.accountId)"
                  }
                },
                "Source.$": "$.ses_source_email",
                "SourceArn.$": "$.ses_source_arn"
              },
              "Resource": "arn:aws:states:::aws-sdk:ses:sendEmail",
              "ResultPath": "$.lastTaskResult",
              "Type": "Task"
            }
          }
        },
        "RoleArn": {
          "Fn::GetAtt": ["TEAMApproveSMRole", "Arn"]
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": ["TEAMStateMachineLogGroup", "Arn"]
                }
              }
            }
          ],
          "IncludeExecutionData": true,
          "Level": "ALL"
        },
        "TracingConfiguration": {
          "Enabled": true
        }
      }
    },
    "TEAMApproveSMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["states.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "TEAMStepFunctionRolePolicy1",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogDelivery",
                    "logs:GetLogDelivery",
                    "logs:UpdateLogDelivery",
                    "logs:DeleteLogDelivery",
                    "logs:ListLogDeliveries",
                    "logs:PutResourcePolicy",
                    "logs:DescribeResourcePolicies",
                    "logs:DescribeLogGroups"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "ses:SendEmail",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "sns:Publish",
                  "Resource": {
                    "Fn::ImportValue": "NotificationTopicArn"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": {
                    "Ref": "functionteamNotifySlackArn"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": ["dynamodb:UpdateItem", "dynamodb:GetItem"],
                  "Resource": {
                    "Fn::Sub": "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/requests*"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": {
                    "Ref": "functionteamStatusArn"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "TEAMScheduleSMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["states.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "TEAMStepFunctionRolePolicy1",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogDelivery",
                    "logs:GetLogDelivery",
                    "logs:UpdateLogDelivery",
                    "logs:DeleteLogDelivery",
                    "logs:ListLogDeliveries",
                    "logs:PutResourcePolicy",
                    "logs:DescribeResourcePolicies",
                    "logs:DescribeLogGroups"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "events:PutTargets",
                    "events:PutRule",
                    "events:DescribeRule"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": "ses:SendEmail",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "sns:Publish",
                  "Resource": {
                    "Fn::ImportValue": "NotificationTopicArn"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": {
                    "Ref": "functionteamNotifySlackArn"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": ["dynamodb:UpdateItem", "dynamodb:GetItem"],
                  "Resource": {
                    "Fn::Sub": "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/requests*"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": "states:StartExecution",
                  "Resource": {
                    "Ref": "GrantStateMachine"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": {
                    "Ref": "functionteamStatusArn"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "TEAMGrantSMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["states.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "TEAMStepFunctionRolePolicy1",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogDelivery",
                    "logs:GetLogDelivery",
                    "logs:UpdateLogDelivery",
                    "logs:DeleteLogDelivery",
                    "logs:ListLogDeliveries",
                    "logs:PutResourcePolicy",
                    "logs:DescribeResourcePolicies",
                    "logs:DescribeLogGroups"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "events:PutTargets",
                    "events:PutRule",
                    "events:DescribeRule"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": "ses:SendEmail",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "sns:Publish",
                  "Resource": {
                    "Fn::ImportValue": "NotificationTopicArn"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": {
                    "Ref": "functionteamNotifySlackArn"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": ["sso:CreateAccountAssignment"],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": ["dynamodb:UpdateItem"],
                  "Resource": {
                    "Fn::Sub": "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/requests*"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": "states:StartExecution",
                  "Resource": {
                    "Ref": "RevokeStateMachine"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:Get*",
                    "iam:List*",
                    "iam:CreateRole",
                    "iam:DeleteRole",
                    "iam:DetachRolePolicy"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": {
                    "Ref": "functionteamStatusArn"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "TEAMRevokeSMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["states.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "TEAMStepFunctionRolePolicy1",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogDelivery",
                    "logs:GetLogDelivery",
                    "logs:UpdateLogDelivery",
                    "logs:DeleteLogDelivery",
                    "logs:ListLogDeliveries",
                    "logs:PutResourcePolicy",
                    "logs:DescribeResourcePolicies",
                    "logs:DescribeLogGroups"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "ses:SendEmail",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "sns:Publish",
                  "Resource": {
                    "Fn::ImportValue": "NotificationTopicArn"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": {
                    "Ref": "functionteamNotifySlackArn"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": ["sso:DeleteAccountAssignment"],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": ["dynamodb:UpdateItem", "dynamodb:GetItem"],
                  "Resource": {
                    "Fn::Sub": "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/requests*"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:Get*",
                    "iam:List*",
                    "iam:CreateRole",
                    "iam:DeleteRole",
                    "iam:DetachRolePolicy"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": {
                    "Ref": "functionteamStatusArn"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "TEAMRejectSMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["states.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "TEAMStepFunctionRolePolicy1",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogDelivery",
                    "logs:GetLogDelivery",
                    "logs:UpdateLogDelivery",
                    "logs:DeleteLogDelivery",
                    "logs:ListLogDeliveries",
                    "logs:PutResourcePolicy",
                    "logs:DescribeResourcePolicies",
                    "logs:DescribeLogGroups"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "ses:SendEmail",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "sns:Publish",
                  "Resource": {
                    "Fn::ImportValue": "NotificationTopicArn"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": {
                    "Ref": "functionteamNotifySlackArn"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": {
                    "Ref": "functionteamStatusArn"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "TEAMStateMachineLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/stepfunction/team-step-function/${env}"
        },
        "KmsKeyId": {
          "Fn::GetAtt": ["LogGroupKey", "Arn"]
        },
        "RetentionInDays": 14
      }
    },
    "LogGroupKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "TEAM Stepfunction CloudwatchLog Key",
        "EnableKeyRotation": true,
        "PendingWindowInDays": 20,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "key-default-1",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
                }
              },
              "Action": "kms:*",
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Sub": "logs.${AWS::Region}.amazonaws.com"
                }
              },
              "Action": [
                "kms:Encrypt*",
                "kms:Decrypt*",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:Describe*"
              ],
              "Resource": "*",
              "Condition": {
                "ArnEquals": {
                  "kms:EncryptionContext:aws:logs:arn": {
                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/stepfunction/team-step-function/${env}"
                  }
                }
              }
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "GrantSMOutput": {
      "Description": "TEAM Grant StateMachine ",
      "Value": {
        "Ref": "GrantStateMachine"
      }
    },
    "RevokeSMOutput": {
      "Description": "TEAM Revoke StateMachine ",
      "Value": {
        "Ref": "RevokeStateMachine"
      }
    },
    "RejectSMOutput": {
      "Description": "TEAM Reject StateMachine ",
      "Value": {
        "Ref": "RejectStateMachine"
      }
    },
    "ScheduleSMOutput": {
      "Description": "TEAM Schedule StateMachine ",
      "Value": {
        "Ref": "ScheduleStateMachine"
      }
    },
    "ApprovalSMOutput": {
      "Description": "TEAM Approval StateMachine ",
      "Value": {
        "Ref": "ApprovalStateMachine"
      }
    }
  },
  "Description": "{\"createdOn\":\"Linux\",\"createdBy\":\"Amplify\",\"createdWith\":\"9.2.1\",\"stackType\":\"custom-customCloudformation\",\"metadata\":{}}"
}
